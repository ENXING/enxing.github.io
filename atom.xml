<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小熊的博客</title>
  
  <subtitle>Steven Xiong</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ibelieveicanfly.gq/"/>
  <updated>2018-10-22T15:09:58.458Z</updated>
  <id>https://ibelieveicanfly.gq/</id>
  
  <author>
    <name>Enxing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Numeric-hw04</title>
    <link href="https://ibelieveicanfly.gq/2018/Numeric-hw04.html"/>
    <id>https://ibelieveicanfly.gq/2018/Numeric-hw04.html</id>
    <published>2018-10-22T10:27:17.000Z</published>
    <updated>2018-10-22T15:09:58.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem-1"><a href="#problem-1" class="headerlink" title="problem 1"></a>problem 1</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P208_4.13.JPG" alt="problem"> </p><ul><li>Solution<ul><li>for any eigenvalue $\lambda$ of matrix $A$, there exists a corresponding eigenvector<br>$X = \bf{0}$: $AX=\lambda X$.<br>And we have $||A|| \cdot ||X||\geq||AX|| = ||\lambda X|| = |\lambda| ||X||$.So we get<br>$|\lambda| \leq ||A||$, then $\rho(A) = {max}_{\lambda_i}{|\lambda_i| } \leq ||A||$</li></ul></li></ul><h2 id="problem-2"><a href="#problem-2" class="headerlink" title="problem 2"></a>problem 2</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P209_4.19.JPG" alt="problem"> </p><ul><li>Solution<ul><li>$A^2 - A = 0; A^2 X - A X = 0; \lambda ^2 - \lambda = 0;$So we have $\lambda = 0 , 1$ </li></ul></li></ul><h2 id="problem-3"><a href="#problem-3" class="headerlink" title="problem 3"></a>problem 3</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P209_4.20.JPG" alt="problem"> </p><ul><li>Solution<ul><li>a Hermitian matrix (or self-adjoint matrix) is a complex square matrix that is equal to its own conjugate transpose.</li><li>notice that eigenvalue of Hermitian matrix is real number.</li><li>a) $\lambda &lt;x, y&gt; = &lt;\lambda x, y&gt; = &lt;Ax, y&gt; = $<br>   $\  \ &lt;x, A^Hy&gt; = &lt;x, Ay&gt;= &lt;x, \mu y&gt; = \mu &lt;x, y&gt;, and \ \lambda \neq \mu$, So we get $y^Hx =0$.</li><li>b) $\mu^H &lt;x, y&gt; = &lt;x, \mu^H y&gt; = &lt;x, A^Hy&gt; = $<br>  $\  \ &lt;Ax, y&gt; = &lt;\lambda x, y&gt;= \lambda^H &lt;x, y&gt;, and \ \lambda \neq \mu$, So we get $y^Hx =0$.</li><li>c) give a counterexample: $A = \begin{bmatrix} 1 &amp; 2 \\ 0 &amp; 2\end{bmatrix}$, for$\lambda = 1$, its eigenvector: $x = [1, 0 ]^T,  and \ \ y = [0.4472, -0.8944]$, obviously we find $y^Hx\neq0$.</li></ul></li></ul><h2 id="problem-4"><a href="#problem-4" class="headerlink" title="problem 4"></a>problem 4</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P209_4.24.JPG" alt="problem"> </p><ul><li><p>Solution</p><ul><li><p>a) As A is a real matrix of rank one, we know it must have non zero row $r_i$ that can linearly represent all the other row $r_j; j\neq i$.So we get </p><p>$\begin{align}A&amp;=[ a_ 1 r_ i,a_2r_i,\cdots,a_ {i-1} r_ i, r_ i, a_ {i+1} r_ i , \cdots ,a_ n  r_ i]^T \\     &amp;=[a_1 , a_2 ,\cdots , a_ {i-1} ,1 , a_ {i+1} ,\cdots ,a_n ]^T \cdot r_ i  = u \cdot v^T\end{align}$<br>and $v = r_i^T\ ;\  u =[a_1 , a_2 ,\cdot , a_{i-1} ,1, a_{i+1} ,\cdot ,a_n ]^T$</p></li><li>b) $uv^Tu = u\cdot v^Tu = v^Tu u$, so we get eigenvalue $v^Tu$ and corresponding eigenvector $u$.</li><li>c) As A is a matrix of rank one, we know have $n-1$ eigenvalue equal to zero, and the rest one is $v^Tu$.</li><li>d)</li></ul></li></ul><h2 id="problem-5"><a href="#problem-5" class="headerlink" title="problem 5"></a>problem 5</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P210_4.25.JPG" alt="problem"> </p><ul><li><p>Solution</p><ul><li><p>As matrix of rank one has a property of Algebraic multiplicity equal to Geometric multiplicity, we know there exists an inverse matrix P,such that $uv^T = P^{-1} diag \{ v^Tu, 0 , 0 , 0, \cdots ,0 \} P$.</p></li><li><p>So we have $det(I + uv^T) = det(I + diag\{v^Tu, 0 , 0 , 0, \cdots ,0 \}) = 1 + u^Tv$</p></li></ul></li></ul><h2 id="problem-6"><a href="#problem-6" class="headerlink" title="problem 6"></a>problem 6</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P210_4.27.JPG" alt="problem"> </p><ul><li>Solution<ul><li>Matrix A is similar to Jordan matrix J, So there is a inverse matrix P such that $P^{-1}AP = J$. Then $|I-A| = |I- J| = \prod_{i = 1}^{n}(1-J_{ii}) &gt; (1-\rho(A))^n \neq 0$</li><li>$(I- A) \cdot \Sigma_{k = 0}^{\infty}A^k = I$</li></ul></li></ul><h2 id="problem-7"><a href="#problem-7" class="headerlink" title="problem 7"></a>problem 7</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P210_4.31.JPG" alt="problem"> </p><ul><li>Solution</li></ul><h2 id="problem-8"><a href="#problem-8" class="headerlink" title="problem 8"></a>problem 8</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P210_4.32.JPG" alt="problem"> </p><ul><li>Solution</li></ul><h2 id="problem-9"><a href="#problem-9" class="headerlink" title="problem 9"></a>problem 9</h2><p>if pivot should be used in the QR decomposition, how would you do in the QR iteration?</p><ul><li>Solution</li></ul><h2 id="problem-10"><a href="#problem-10" class="headerlink" title="problem 10"></a>problem 10</h2><p>If a Martix is large and sparse, how would you find its largest 10 eigenvalues and eigenvectors?</p><ul><li>Solution</li></ul><h2 id="problem-11"><a href="#problem-11" class="headerlink" title="problem 11"></a>problem 11</h2><p>Computer problem (in C or C++): Write the functions to achieve (1) Arnoldi iteration and Lanczos iteration; (2) QR iteration for Hessenburg matrix to find the eigenvalue decomposition. Test these algorithms for a few matrix.</p><ul><li>Solution</li></ul><h2 id="problem-12"><a href="#problem-12" class="headerlink" title="problem 12"></a>problem 12</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P248_5.5.JPG" alt="problem"> </p><ul><li>Solution</li></ul><h2 id="problem-13"><a href="#problem-13" class="headerlink" title="problem 13"></a>problem 13</h2><p><img src="https://ibelieveicanfly.gq/figure/hw04/P250_5.10.JPG" alt="problem"> </p><ul><li>Solution</li></ul><h2 id="problem-14"><a href="#problem-14" class="headerlink" title="problem 14"></a>problem 14</h2><p>Computer problem (in C or C++): Write the functions to achieve Newton’s method and Broyden’s method. Test these methods for a few equation systems.</p><ul><li>Solution</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem-1&quot;&gt;&lt;a href=&quot;#problem-1&quot; class=&quot;headerlink&quot; title=&quot;problem 1&quot;&gt;&lt;/a&gt;problem 1&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ibelieveicanfly.gq/figur
      
    
    </summary>
    
      <category term="Numeric" scheme="https://ibelieveicanfly.gq/categories/Numeric/"/>
    
    
      <category term="2018-fall" scheme="https://ibelieveicanfly.gq/tags/2018-fall/"/>
    
      <category term="numeric" scheme="https://ibelieveicanfly.gq/tags/numeric/"/>
    
  </entry>
  
  <entry>
    <title>encryption</title>
    <link href="https://ibelieveicanfly.gq/2018/encryption.html"/>
    <id>https://ibelieveicanfly.gq/2018/encryption.html</id>
    <published>2018-10-22T10:27:17.000Z</published>
    <updated>2018-10-22T14:27:17.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem-1-Page-148-3-30"><a href="#problem-1-Page-148-3-30" class="headerlink" title="problem 1 [ Page 148, 3.30]"></a>problem 1 [ Page 148, 3.30]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P01_3_30.JPG" alt="problem"> </p><ul><li>Solution<ul><li>As the normal vector is: $v = \bf{a} - \alpha \bf{e_1}$, we need avoid cancellation. So the sign should be : $$\bf{-}sign(\bf{a}^T \cdot \bf{e_1})$$</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem-1-Page-148-3-30&quot;&gt;&lt;a href=&quot;#problem-1-Page-148-3-30&quot; class=&quot;headerlink&quot; title=&quot;problem 1 [ Page 148, 3.30]&quot;&gt;&lt;/a&gt;problem 1 [ P
      
    
    </summary>
    
      <category term="Numeric" scheme="https://ibelieveicanfly.gq/categories/Numeric/"/>
    
    
      <category term="markdown" scheme="https://ibelieveicanfly.gq/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>LearnCode</title>
    <link href="https://ibelieveicanfly.gq/2018/LearnCode.html"/>
    <id>https://ibelieveicanfly.gq/2018/LearnCode.html</id>
    <published>2018-10-05T08:08:28.000Z</published>
    <updated>2018-10-18T14:07:57.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h1 id="Learning-C-Coding-Skill"><a href="#Learning-C-Coding-Skill" class="headerlink" title="Learning C++ Coding Skill"></a>Learning C++ Coding Skill</h1><p><img src="https://ichef.bbci.co.uk/news/976/cpsprodpb/9947/production/_103893293_ec317eb7-0fa2-4ec8-ab8e-53c9ce976a63.jpg" alt="image"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * g++ -O3 -Wall --std=c++11 qr_standalone.cpp -o qr_standalone</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// default constructor (don't allocate)</span></span><br><span class="line">  Matrix() : m(<span class="number">0</span>), n(<span class="number">0</span>), data(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// constructor with memory allocation, initialized to zero</span></span><br><span class="line">  Matrix(<span class="keyword">int</span> m_, <span class="keyword">int</span> n_) : Matrix() &#123;</span><br><span class="line">    m = m_;</span><br><span class="line">    n = n_;</span><br><span class="line">    allocate(m_,n_);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// copy constructor</span></span><br><span class="line">  Matrix(<span class="keyword">const</span> Matrix&amp; mat) : Matrix(mat.m,mat.n) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">(*<span class="keyword">this</span>)(i,j) = mat(i,j);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// constructor from array</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">int</span> rows, <span class="keyword">int</span> cols&gt;</span><br><span class="line">  Matrix(<span class="keyword">double</span> (&amp;a)[rows][cols]) : Matrix(rows,cols) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">(*<span class="keyword">this</span>)(i,j) = a[i][j];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// destructor</span></span><br><span class="line">  ~Matrix() &#123;</span><br><span class="line">    deallocate();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="comment">// access data operators</span></span><br><span class="line">  <span class="function"><span class="keyword">double</span>&amp; <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data[i+m*j]; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">double</span>  <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data[i+m*j]; &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// operator assignment</span></span><br><span class="line">  Matrix&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Matrix&amp; source) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// self-assignment check</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;source) &#123; </span><br><span class="line">      <span class="keyword">if</span> ( (m*n) != (source.m * source.n) ) &#123; <span class="comment">// storage cannot be reused</span></span><br><span class="line">allocate(source.m,source.n);          <span class="comment">// re-allocate storage</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// storage can be used, copy data</span></span><br><span class="line">      <span class="built_in">std</span>::copy(source.data, source.data + source.m*source.n, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// compute minor</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">compute_minor</span><span class="params">(<span class="keyword">const</span> Matrix&amp; mat, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    allocate(mat.m, mat.n);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++)</span><br><span class="line">    (*<span class="keyword">this</span>)(i,i) = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt; mat.m; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = d; j &lt; mat.n; j++)</span><br><span class="line">(*<span class="keyword">this</span>)(i,j) = mat(i,j);</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Matrix multiplication</span></span><br><span class="line">  <span class="comment">// c = a * b</span></span><br><span class="line">  <span class="comment">// c will be re-allocated here</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(<span class="keyword">const</span> Matrix&amp; a, <span class="keyword">const</span> Matrix&amp; b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a.n != b.m) &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Matrix multiplication not possible, sizes don't match !\n"</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// reallocate ourself if necessary i.e. current Matrix has not valid sizes</span></span><br><span class="line">    <span class="keyword">if</span> (a.m != m <span class="keyword">or</span> b.n != n)</span><br><span class="line">      allocate(a.m, b.n);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">memset</span>(data,<span class="number">0</span>,m*n*<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.m; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.n; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; a.n; k++)</span><br><span class="line">  (*<span class="keyword">this</span>)(i,j) += a(i,k) * b(k,j);</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">transpose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">double</span> t = (*<span class="keyword">this</span>)(i,j);</span><br><span class="line">(*<span class="keyword">this</span>)(i,j) = (*<span class="keyword">this</span>)(j,i);</span><br><span class="line">(*<span class="keyword">this</span>)(j,i) = t;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// take c-th column of m, put in v</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">extract_column</span><span class="params">(Vector&amp; v, <span class="keyword">int</span> c)</span></span>;  </span><br><span class="line"> </span><br><span class="line">  <span class="comment">// memory allocation</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> m_, <span class="keyword">int</span> n_)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// if already allocated, memory is freed</span></span><br><span class="line">    deallocate();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// new sizes</span></span><br><span class="line">    m = m_;</span><br><span class="line">    n = n_;</span><br><span class="line"> </span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">double</span>[m_*n_];</span><br><span class="line">    <span class="built_in">memset</span>(data,<span class="number">0</span>,m_*n_*<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line"> </span><br><span class="line">  &#125; <span class="comment">// allocate</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// memory free</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deallocate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (data)</span><br><span class="line">      <span class="keyword">delete</span>[] data;</span><br><span class="line"> </span><br><span class="line">    data = <span class="literal">nullptr</span>;</span><br><span class="line"> </span><br><span class="line">  &#125;    </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">int</span> m, n;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">double</span>* data;</span><br><span class="line"> </span><br><span class="line">&#125;; <span class="comment">// struct Matrix</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// column vector</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// default constructor (don't allocate)</span></span><br><span class="line">  Vector() : size(<span class="number">0</span>), data(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// constructor with memory allocation, initialized to zero</span></span><br><span class="line">  Vector(<span class="keyword">int</span> size_) : Vector() &#123;</span><br><span class="line">    size = size_;</span><br><span class="line">    allocate(size_);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// destructor</span></span><br><span class="line">  ~Vector() &#123;</span><br><span class="line">    deallocate();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// access data operators</span></span><br><span class="line">  <span class="function"><span class="keyword">double</span>&amp; <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data[i]; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">double</span>  <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data[i]; &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// operator assignment</span></span><br><span class="line">  Vector&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&amp; source) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// self-assignment check</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;source) &#123; </span><br><span class="line">      <span class="keyword">if</span> ( size != (source.size) ) &#123;   <span class="comment">// storage cannot be reused</span></span><br><span class="line">allocate(source.size);         <span class="comment">// re-allocate storage</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// storage can be used, copy data</span></span><br><span class="line">      <span class="built_in">std</span>::copy(source.data, source.data + source.size, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// memory allocation</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> size_)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    deallocate();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// new sizes</span></span><br><span class="line">    size = size_;</span><br><span class="line"> </span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">double</span>[size_];</span><br><span class="line">    <span class="built_in">memset</span>(data,<span class="number">0</span>,size_*<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line"> </span><br><span class="line">  &#125; <span class="comment">// allocate</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// memory free</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deallocate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (data)</span><br><span class="line">      <span class="keyword">delete</span>[] data;</span><br><span class="line"> </span><br><span class="line">    data = <span class="literal">nullptr</span>;</span><br><span class="line"> </span><br><span class="line">  &#125;    </span><br><span class="line"> </span><br><span class="line">  <span class="comment">//   ||x||</span></span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">norm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) sum += (*<span class="keyword">this</span>)(i) * (*<span class="keyword">this</span>)(i);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(sum);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// divide data by factor</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rescale</span><span class="params">(<span class="keyword">double</span> factor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) (*<span class="keyword">this</span>)(i) /= factor;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rescale_unit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> factor = norm();</span><br><span class="line">    rescale(factor);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">double</span>* data;</span><br><span class="line"> </span><br><span class="line">&#125;; <span class="comment">// class Vector</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// c = a + b * s</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vmadd</span><span class="params">(<span class="keyword">const</span> Vector&amp; a, <span class="keyword">const</span> Vector&amp; b, <span class="keyword">double</span> s, Vector&amp; c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (c.size != a.size <span class="keyword">or</span> c.size != b.size) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"[vmadd]: vector sizes don't match\n"</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.size; i++)</span><br><span class="line">    c(i) = a(i) + s * b(i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// mat = I - 2*v*v^T</span></span><br><span class="line"><span class="comment">// !!! m is allocated here !!!</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compute_householder_factor</span><span class="params">(Matrix&amp; mat, <span class="keyword">const</span> Vector&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">int</span> n = v.size;</span><br><span class="line">  mat.allocate(n,n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">      mat(i,j) = <span class="number">-2</span> *  v(i) * v(j);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    mat(i,i) += <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// take c-th column of a matrix, put results in Vector v</span></span><br><span class="line"><span class="keyword">void</span> Matrix::extract_column(Vector&amp; v, <span class="keyword">int</span> c) &#123;</span><br><span class="line">  <span class="keyword">if</span> (m != v.size) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"[Matrix::extract_column]: Matrix and Vector sizes don't match\n"</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    v(i) = (*<span class="keyword">this</span>)(i,c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_show</span><span class="params">(<span class="keyword">const</span> Matrix&amp;  m, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str=<span class="string">""</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m.m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m.n; j++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" %8.4f"</span>, m(i,j));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// L2-norm ||A-B||^2</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">matrix_compare</span><span class="params">(<span class="keyword">const</span> Matrix&amp; A, <span class="keyword">const</span> Matrix&amp; B)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// matrices must have same size</span></span><br><span class="line">  <span class="keyword">if</span> (A.m != B.m <span class="keyword">or</span>  A.n != B.n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">double</span>&gt;::max();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.n; j++) &#123;</span><br><span class="line">      res += (A(i,j)-B(i,j)) * (A(i,j)-B(i,j));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  res /= A.m*A.n;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">householder</span><span class="params">(Matrix&amp; mat,</span></span></span><br><span class="line"><span class="function"><span class="params"> Matrix&amp; R,</span></span></span><br><span class="line"><span class="function"><span class="params"> Matrix&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">int</span> m = mat.m;</span><br><span class="line">  <span class="keyword">int</span> n = mat.n;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// array of factor Q1, Q2, ... Qm</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Matrix&gt; qv(m);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// temp array</span></span><br><span class="line">  <span class="function">Matrix <span class="title">z</span><span class="params">(mat)</span></span>;</span><br><span class="line">  Matrix z1;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n &amp;&amp; k &lt; m - <span class="number">1</span>; k++) &#123;</span><br><span class="line"> </span><br><span class="line">    Vector e(m), x(m);</span><br><span class="line">    <span class="keyword">double</span> a;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// compute minor</span></span><br><span class="line">    z1.compute_minor(z, k);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// extract k-th column into x</span></span><br><span class="line">    z1.extract_column(x, k);</span><br><span class="line"> </span><br><span class="line">    a = x.norm();</span><br><span class="line">    <span class="keyword">if</span> (mat(k,k) &gt; <span class="number">0</span>) a = -a;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e.size; i++)</span><br><span class="line">      e(i) = (i == k) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// e = x + a*e</span></span><br><span class="line">    vmadd(x, e, a, e);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// e = e / ||e||</span></span><br><span class="line">    e.rescale_unit();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// qv[k] = I - 2 *e*e^T</span></span><br><span class="line">    compute_householder_factor(qv[k], e);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// z = qv[k] * z1</span></span><br><span class="line">    z.mult(qv[k], z1);</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  Q = qv[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// after this loop, we will obtain Q (up to a transpose operation)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n &amp;&amp; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line"> </span><br><span class="line">    z1.mult(qv[i], Q);</span><br><span class="line">    Q = z1;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  R.mult(Q, mat);</span><br><span class="line">  Q.transpose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*********************************************************************************</span></span><br><span class="line"><span class="keyword">double</span> in[<span class="number">21</span>][<span class="number">12</span>];</span><br><span class="line"><span class="keyword">double</span> y[<span class="number">21</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> Epsilon = <span class="number">1E-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pwr</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">tmp *= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">poly</span><span class="params">(<span class="keyword">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line">f += pwr(t, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">double</span> m[<span class="number">21</span>][<span class="number">12</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; ++j) &#123;</span><br><span class="line">m[i][j] = pwr(i /<span class="number">20.0</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> u[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; ++i) &#123;</span><br><span class="line">u[i] = (<span class="number">2</span>*  rand() / <span class="number">1.0</span> / RAND_MAX - <span class="number">1</span>) * Epsilon;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; ++i) &#123;</span><br><span class="line">y[i][<span class="number">0</span>] = poly(i / <span class="number">20.0</span>) + u[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*********************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">initial(in);</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">A</span><span class="params">(in)</span></span>; </span><br><span class="line"><span class="function">Matrix <span class="title">Y</span><span class="params">(y)</span></span>;</span><br><span class="line">Matrix Q, R;</span><br><span class="line"></span><br><span class="line">matrix_show(A,<span class="string">"A"</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// compute QR decompostion</span></span><br><span class="line">householder(A, R, Q);</span><br><span class="line">matrix_show(R,<span class="string">"R"</span>);  </span><br><span class="line">matrix_show(Q,<span class="string">"Q"</span>);  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">// compare Q*R to the original matrix A</span></span><br><span class="line">Matrix A_check;</span><br><span class="line">A_check.mult(Q, R);</span><br><span class="line"></span><br><span class="line"><span class="comment">// compute L2 norm ||A-A_check||^2</span></span><br><span class="line"><span class="keyword">double</span> L2 = matrix_compare(A, A_check);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// display Q*R</span></span><br><span class="line">matrix_show(a_check, l2 &lt; <span class="number">1e-12</span> ? <span class="string">"a == q * r ? yes"</span> : <span class="string">"a == q * r ? no"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//matrix_show(Q,"Q");</span></span><br><span class="line"><span class="comment">//matrix_show(R,"R");</span></span><br><span class="line"></span><br><span class="line"><span class="function">Matrix  <span class="title">copy_Q</span><span class="params">(Q)</span></span>;</span><br><span class="line">Q.transpose();</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix  <span class="title">copy_R</span><span class="params">(R)</span></span>;</span><br><span class="line"></span><br><span class="line">Matrix yy;<span class="comment">//yy = Q'Y;</span></span><br><span class="line">yy.mult(Q, Y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> factor = <span class="number">1</span> / copy_R(j, j);</span><br><span class="line">copy_R(j, j) = <span class="number">1</span>;</span><br><span class="line">yy(j, <span class="number">0</span>) *= factor;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = j - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">yy(i, <span class="number">0</span>) -= yy(j, <span class="number">0</span>) * copy_R(i, j);</span><br><span class="line">copy_R(i, j) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"Solution "</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %2.10f\n"</span>, yy(i,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" \n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h1&gt;&lt;h1 id=&quot;Learning-C-Coding-Skill&quot;&gt;&lt;a href=&quot;#Learning-C-Coding-Skill&quot; class
      
    
    </summary>
    
      <category term="Code" scheme="https://ibelieveicanfly.gq/categories/Code/"/>
    
      <category term="C++" scheme="https://ibelieveicanfly.gq/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>VIM_NOTE</title>
    <link href="https://ibelieveicanfly.gq/2018/VIM-NOTE.html"/>
    <id>https://ibelieveicanfly.gq/2018/VIM-NOTE.html</id>
    <published>2018-10-02T14:54:17.000Z</published>
    <updated>2018-10-02T14:56:18.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MARK"><a href="#MARK" class="headerlink" title="MARK"></a>MARK</h1><p>1.设置标签<br>ma 在当前位置设立一个标签名字是a，这是一个局部标签，只在当前文件内有效。<br>如果要设置全局标签，在多个文件之间跳转的话，只要将标签名字大写就可，即mA。<br>2.标签跳转<br>`a 跳转到标签a的位置<br>3.标签删除 delmarks a<br>4.查看当前设置的标签 ：marks</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MARK&quot;&gt;&lt;a href=&quot;#MARK&quot; class=&quot;headerlink&quot; title=&quot;MARK&quot;&gt;&lt;/a&gt;MARK&lt;/h1&gt;&lt;p&gt;1.设置标签&lt;br&gt;ma 在当前位置设立一个标签名字是a，这是一个局部标签，只在当前文件内有效。&lt;br&gt;如果要设置全局标签，
      
    
    </summary>
    
      <category term="NOTE" scheme="https://ibelieveicanfly.gq/categories/NOTE/"/>
    
    
      <category term="NOTE" scheme="https://ibelieveicanfly.gq/tags/NOTE/"/>
    
      <category term="VIM" scheme="https://ibelieveicanfly.gq/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>Numeric-hw03</title>
    <link href="https://ibelieveicanfly.gq/2018/Numeric-hw03.html"/>
    <id>https://ibelieveicanfly.gq/2018/Numeric-hw03.html</id>
    <published>2018-10-02T12:04:37.000Z</published>
    <updated>2018-10-22T11:03:21.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem-1-Page-148-3-30"><a href="#problem-1-Page-148-3-30" class="headerlink" title="problem 1 [ Page 148, 3.30]"></a>problem 1 [ Page 148, 3.30]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P01_3_30.JPG" alt="problem"> </p><ul><li>Solution<ul><li>As the normal vector is: $v = \bf{a} - \alpha \bf{e_1}$, we need avoid cancellation. So the sign should be : $$\bf{-}sign(\bf{a}^T \cdot \bf{e_1})$$</li></ul></li></ul><h2 id="problem-2-Page-148-3-33"><a href="#problem-2-Page-148-3-33" class="headerlink" title="problem 2 [ Page 148, 3.33]"></a>problem 2 [ Page 148, 3.33]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P02_3_33.JPG" alt="problem"> </p><ul><li>Solution (<a href="https://www.inf.ethz.ch/personal/gander/papers/qrneu.pdf" target="_blank" rel="noopener">Reference</a>)<ul><li>LU factorization Of A: if no using partial pivoting, No additional storage of memory is needed except storage of matrix A. if using partial pivoting, the permutation matrix P need to be stored, and only need an extra storage of $(n - 1) \times 2$ array.</li><li>QR factorization of A: only need an extra storage of $m \times 1$ array.<ul><li>Following Graph: <img src="https://ibelieveicanfly.gq/figure/hw03/P03_3_33_2.JPG" alt="following graph"> </li></ul></li></ul></li></ul><h2 id="problem-3-Page-149-3-44"><a href="#problem-3-Page-149-3-44" class="headerlink" title="problem 3 [ Page 149, 3.44]"></a>problem 3 [ Page 149, 3.44]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P03_3_44.JPG" alt="problem"> </p><ul><li>Solution<ul><li>Matrix elementary transformation.</li><li>find max integer r, such that there is a sub-square-matrix formed by  entries intersected by r rows and r columns  of rectangular matrix and that determinant  is no equal to zero.</li><li>QR-Householder decomposition, observe matrix R, can easily get rank.</li><li>Singluar Value Decomposition, observe non-zero of diagonal matrix.</li></ul></li></ul><h2 id="problem-4-Page-149-3-45"><a href="#problem-4-Page-149-3-45" class="headerlink" title="problem 4 [ Page 149, 3.45]"></a>problem 4 [ Page 149, 3.45]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P04_3_45.JPG" alt="problem"> </p><ul><li>Solution<ul><li>$(c) &gt; (a) &gt; (b)$</li></ul></li></ul><h2 id="problem-5-Page-149-3-1"><a href="#problem-5-Page-149-3-1" class="headerlink" title="problem 5 [ Page 149, 3.1 ]"></a>problem 5 [ Page 149, 3.1 ]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P05_3_1.JPG" alt="problem"> </p><ul><li>Solution<ul><li>$\begin{bmatrix}1 &amp; 10 \\  1 &amp; 15 \\ 1&amp; 20 \end{bmatrix}  \begin{bmatrix}x_1\\ x_2\end{bmatrix}=\begin{bmatrix}11.60\\ 11.85\\ 12.25 \end{bmatrix}$</li><li>inconstitent. <ul><li>$x_1 = 11.10 ,\  x_2 = 0.05 (eqn \ 1 \ and \ 2)$ </li><li>$x_1 = 10.65,\  x_2 = 0.08 (eqn \ 2 \ and \ 3)$</li><li>There is no reason to prefer any one of these result.</li></ul></li><li>normal equation:<ul><li>$A = \begin{bmatrix}1 &amp; 10 \\  1 &amp; 15  \\ 1&amp; 20 \end{bmatrix}$ ; $b= \begin{bmatrix}11.60\\ 11.85\\ 12.25 \end{bmatrix}$</li><li>$A^{T} \cdot A x = A^T b$</li><li>$x_1 = 10.9250, \ x_2 = 0.0650$ </li><li>the result got by normal equation is better than those obtain in part b, and that seems to be certain average of possible pair of values obtained by selecting  any two of the equation from the system.</li></ul></li></ul></li></ul><h2 id="problem-6-Page-149-3-3"><a href="#problem-6-Page-149-3-3" class="headerlink" title="problem 6 [ Page 149, 3.3 ]"></a>problem 6 [ Page 149, 3.3 ]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P06_3_2.JPG" alt="problem"> </p><ul><li>Solution<ul><li>$\begin{bmatrix}1 &amp; e \\  2 &amp; e^2 \\ 3 &amp; e^3 \end{bmatrix}  \begin{bmatrix}x_1 \\ x_2\end{bmatrix}=\begin{bmatrix}2 \\ 3\\ 5 \end{bmatrix}$</li><li>$A = \begin{bmatrix}1 &amp; e \\  2 &amp; e^2 \\ 3 &amp; e^3 \end{bmatrix} \ and \  b = \begin{bmatrix}2\\ 3\\ 5 \end{bmatrix}$</li><li>normal equation:  $A^{T} \cdot A x = A^T b$</li><li>$(x_1,\  x_2) =  ( 1.5942, \ 0.0088)$</li></ul></li></ul><h2 id="problem-7-Page-150-3-14"><a href="#problem-7-Page-150-3-14" class="headerlink" title="problem 7 [ Page 150, 3.14 ]"></a>problem 7 [ Page 150, 3.14 ]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P07_3_14.JPG" alt="problem"> </p><ul><li>Solution<ul><li>orthogonal : $H^T* H =  I$<ul><li>$H^T*H = (I - 2\frac{vv^T}{v^Tv})^T\cdot (I - 2\frac{vv^T}{v^Tv})$</li><li>$=I - 2 \frac{vv^T}{v^T v} - 2 [\frac{vv^T}{v^T v}]^T +4 [\frac{vv^T}{v^T v}]^T * [\frac{vv^T}{v^T v}] = I$</li></ul></li><li>symmetric: $H^T = H$ ; Obviously.</li></ul></li></ul><h2 id="problem-8-Page-152-3-31"><a href="#problem-8-Page-152-3-31" class="headerlink" title="problem 8 [ Page 152, 3.31 ]"></a>problem 8 [ Page 152, 3.31 ]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P08_3_31.JPG" alt="problem"> </p><ul><li>Solution (<a href="https://math.stackexchange.com/questions/974193/why-does-svd-provide-the-least-squares-and-least-norm-solution-to-a-x-b" target="_blank" rel="noopener">Reference</a>)<ul><li>$A^T A X= A^Tb$</li><li>$\Rightarrow X = (A^TA)^{-1} A^T b; \ A = U\Sigma V^T$</li><li>$\Rightarrow X = ( [U\Sigma V^T]^TU\Sigma V^T)^{-1} [U\Sigma V^T]^T b$</li><li>$\Rightarrow X = ( V\Sigma^T\Sigma V^T)^{-1} V\Sigma^T U^T b$</li><li>$\Rightarrow X =  V\Sigma^{-1}(\Sigma^T)^{-1} V^{-1} V\Sigma^T U^T b$</li><li>$\Rightarrow X =  V\Sigma^{-1}(\Sigma^T)^{-1} \Sigma^T U^T b$</li><li>$\Rightarrow X =  V\Sigma^{-1} U^T b$</li><li>$\Rightarrow X =  V\Sigma^{+} U^T b$</li><li>$U = [u_1 , u_2, \cdots , u_n]; V=[v_1, v_2, \cdots, u_n]; $</li><li>$\Sigma^{+} = diag[1/\sigma_1 , 1/\sigma_2, \cdots, 1/\sigma_r, 0 ,0 ]$</li><li>So we get $X = \sum_{\sigma_i \neq 0} \frac{u_i^Tb}{\sigma_i}v_i$</li></ul></li></ul><h2 id="problem-9-Page-152-3-32"><a href="#problem-9-Page-152-3-32" class="headerlink" title="problem 9 [ Page 152, 3.32 ]"></a>problem 9 [ Page 152, 3.32 ]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw03/P09_3_32.JPG" alt="problem"> </p><ul><li>Solution<ul><li>$AA^+A = U\Sigma V^T \cdot V\Sigma ^+U^T\cdot U\Sigma V^T = U\Sigma V^T= A$</li><li>$A^+AA^+ =V\Sigma ^+U^T\cdot U\Sigma V^T \cdot V\Sigma ^+U^T =V\Sigma ^+U^T= A^+$</li><li>$(A^+A)^T= A^+A$ <ul><li>$(A^+A)^T =(V\Sigma ^+U^T\cdot U\Sigma V^T )^T=V{ \Sigma ^T \Sigma ^+}^T V^T$</li><li>$A^+A =V\Sigma ^+U^T \cdot U\Sigma V^T=V\Sigma ^+\Sigma V^T$</li><li>Obviously $\Sigma^+\Sigma = (\Sigma^+\Sigma)^T$<br><img src="https://ibelieveicanfly.gq/figure/hw03/Pseudoinverse.JPG" alt="Pseudoinverse"> </li></ul></li><li>$(AA^+)^T= AA^+$  for the same reason, can be proved.</li></ul></li></ul><h2 id="problem-10"><a href="#problem-10" class="headerlink" title="problem 10"></a><a href="https://rosettacode.org/wiki/QR_decomposition" target="_blank" rel="noopener">problem 10</a></h2><p>Computer problem (in C or C++): Using Householder transform to achieve the QR decomposition with and without a column pivoting. Then, using QR decomposition to finish 3.8 on page 154.<br><img src="https://ibelieveicanfly.gq/figure/hw03/P10_3_8_0.JPG" alt="problem"> </p><ul><li><a href="https://jbox.sjtu.edu.cn/l/I510xy" target="_blank" rel="noopener">Code Download</a><ul><li>Cholesky factorization is more sensitive, I think.</li><li>QR method comes closer to recovering the x that we  used to generate the data!</li><li>Not affect. As it exists the random error, having different solutions is not weird, and we can average the solutions generate by QR method.<br><img src="https://ibelieveicanfly.gq/figure/hw03/A.JPG" alt="A"><br><img src="https://ibelieveicanfly.gq/figure/hw03/QR.JPG" alt="QR"><br><img src="https://ibelieveicanfly.gq/figure/hw03/Solution.JPG" alt="Solution"> </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem-1-Page-148-3-30&quot;&gt;&lt;a href=&quot;#problem-1-Page-148-3-30&quot; class=&quot;headerlink&quot; title=&quot;problem 1 [ Page 148, 3.30]&quot;&gt;&lt;/a&gt;problem 1 [ P
      
    
    </summary>
    
      <category term="Numeric" scheme="https://ibelieveicanfly.gq/categories/Numeric/"/>
    
    
      <category term="2018-fall" scheme="https://ibelieveicanfly.gq/tags/2018-fall/"/>
    
      <category term="numeric" scheme="https://ibelieveicanfly.gq/tags/numeric/"/>
    
  </entry>
  
  <entry>
    <title>Numeric-hw02</title>
    <link href="https://ibelieveicanfly.gq/2018/Numeric-hw02.html"/>
    <id>https://ibelieveicanfly.gq/2018/Numeric-hw02.html</id>
    <published>2018-09-23T11:34:51.000Z</published>
    <updated>2018-10-22T11:03:30.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018年9月23日-Homework02"><a href="#2018年9月23日-Homework02" class="headerlink" title=" 2018年9月23日 Homework02 "></a><center> 2018年9月23日 Homework02 </center></h1><p>本次作业的源码<a href="https://jbox.sjtu.edu.cn/l/G575Bw" target="_blank" rel="noopener">下载链接</a></p><h2 id="Problem-1-Page94-2-45"><a href="#Problem-1-Page94-2-45" class="headerlink" title="Problem 1 [Page94, 2.45]"></a>Problem 1 [Page94, 2.45]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p01.JPG" alt="problem"> </p><ul><li>Solution<br>不能直接求矩阵$A$的逆矩阵，否则计算量太大了。设$A^{-1}Bc = x$,则有$Ax=Bc$，那么右端一个矩阵乘以一个向量，计算量很小，然后求解线性方程$Ax=b, b= Bc$，可以用LU 分解等等。</li></ul><h2 id="problem-2-Page-95-2-48"><a href="#problem-2-Page-95-2-48" class="headerlink" title="problem 2 [Page 95, 2.48]"></a>problem 2 [Page 95, 2.48]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p02.JPG" alt="problem"> </p><ul><li>Solution<ul><li>$A^{T} = U^{T} L^{T}$ , $U^{T}$是下三角，而$L^{T}$是上三角，因此只考虑$A=LU, Ax=b$：</li><li>如果$A$矩阵已经分解成三角形式$A=LU$，那么可以通过两步过程求解出$x$，首先，设$y=Ux$，然后对$y$解方程组$Ly=b$。因为$L$是三角形的，从这个方程确定$y$仅需要$O(n^2)$运算。一旦$y$已知，上三角方程组$Ux=y$仅需要另外的$O(n^2)$运算来确定解$x$。</li></ul></li></ul><h2 id="problem-3-Page-95-2-49"><a href="#problem-3-Page-95-2-49" class="headerlink" title="problem 3 [Page 95, 2.49]"></a>problem 3 [Page 95, 2.49]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p03.JPG" alt="problem"> </p><ul><li>Solution<ul><li>（a）下三角矩阵$Ly=b$只需要$O(n^2 )$计算量，然后置换矩阵$Px =y$只需进行 行交换 可得单位阵而得到求解。</li><li>（b）$PLx = b$，这个先对$Py =b$,进行行交换将左端矩阵变成单位阵即可求解，然后 $Lx=y$进行高斯消元只需$O(n^2)$计算量。</li></ul></li></ul><h2 id="problem-4-Page-95-2-51"><a href="#problem-4-Page-95-2-51" class="headerlink" title="problem 4 [Page 95, 2.51]"></a>problem 4 [Page 95, 2.51]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p04.JPG" alt="problem"> </p><ul><li>Solution<ul><li>可能，如 $x = (4, 4), y=(5, 1)$。</li></ul></li></ul><h2 id="problem-5-Page-95-2-52"><a href="#problem-5-Page-95-2-52" class="headerlink" title="problem 5 [Page 95, 2.52]"></a>problem 5 [Page 95, 2.52]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p05.JPG" alt="problem"> </p><ul><li>Solution<ul><li>$|A|_1$: 是各列1范数的最大值，这个更加容易计算。</li></ul></li></ul><h2 id="problem-6-page95-2-57"><a href="#problem-6-page95-2-57" class="headerlink" title="problem 6 [page95, 2.57]"></a>problem 6 [page95, 2.57]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p06.JPG" alt="problem"> </p><ul><li>Solution<ul><li>A=$\begin{bmatrix}4 &amp; 0 &amp; 0\\  0 &amp; -6 &amp; 0 \\ 0&amp; 0&amp;2 \end{bmatrix}$</li><li>$cond(A) = |A|_1 \cdot |A^{-1}|_1 = 6 * 0.5 = 3$</li><li>$cond(A) = |A|_ {\infty} \cdot |A^{-1}|_ {\infty} = 6 * 0.5 = 3$</li></ul></li></ul><h2 id="problem-7-Page-95-2-61"><a href="#problem-7-Page-95-2-61" class="headerlink" title="problem 7 [Page 95, 2.61]"></a>problem 7 [Page 95, 2.61]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p07.JPG" alt="problem"> </p><ul><li>Solution<ul><li>a) $cond(A) = 10^ {10} * 10^ {10} = 10^ {20}$</li><li>b) $cond(A) = 10^{10} * 10^{-10} = 1$</li><li>c) $cond(A) = 10^{-10} * 10^{10} = 1$</li><li>d) $cond(A) = 6 * \infty = \infty$</li></ul></li></ul><h2 id="problem-8-Page-96-2-77"><a href="#problem-8-Page-96-2-77" class="headerlink" title="problem 8 [Page 96, 2.77]"></a>problem 8 [Page 96, 2.77]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p08.JPG" alt="problem"> </p><ul><li>Solution<ul><li>$\begin{bmatrix} 4 &amp; 2\\ 2&amp;2\end{bmatrix} =\begin{bmatrix} 2 &amp; 0\\ 1&amp;1\end{bmatrix} \cdot \begin{bmatrix} 2 &amp; 1\\ 0&amp;1\end{bmatrix}  $</li></ul></li></ul><h2 id="problem-9-Page-97-2-10"><a href="#problem-9-Page-97-2-10" class="headerlink" title="problem 9 [Page 97, 2.10]"></a>problem 9 [Page 97, 2.10]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p09.JPG" alt="problem"> </p><ul><li>Solution<ul><li>A permutation matrix is a matrix obtained by permuting the rows of an identity matrix according to some permutation of the numbers 1 to . Every row and column therefore contains precisely a single 1 with 0s everywhere else, and every permutation corresponds to a unique permutation matrix.</li><li>显然任意行交换矩阵 可以表示成多个单一行交换矩阵连乘: $P = P_1 P_2 P_3 \cdots P_k， P_i^T = P_i, P_i^ {-1} = P_i$</li><li>那么有 $P^T= P_k^T  P_ {k-1}^T  P_ {k-2}^T \cdots  P_k^T = P_k P_ {k-1} P_{k-2} \cdots P_1$</li><li>$P * P^T =   P_1 P_2 P_3 \cdots P_k \cdot  P_k P_ {k-1} P_{k-2} \cdots P_1 = I$</li><li>(另一种证明) $P = (e_ {i_1}, e_ {i_2}, e_ {i_3} \cdots e_ {i_n}), P^T = (e_ {i_1}^T, e_ {i_2}^T, e_ {i_3}^T \cdots e_ {i_n}^T)^T$ <ul><li>显然： $P*P^T= I$</li></ul></li></ul></li></ul><h2 id="problem-10-Page-98-2-31"><a href="#problem-10-Page-98-2-31" class="headerlink" title="problem 10 [Page 98, 2.31]"></a>problem 10 [Page 98, 2.31]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw02/p10.JPG" alt="problem"> </p><ul><li><p>Solution<br>  1) $||x||&gt;0$ if $x \neq 0$<br>  2) $||\gamma x|| = |\gamma | \cdot ||x||$<br>  3) $||x+y|| \leq ||x|| + ||y||$</p><ul><li>第一条更加正定矩阵的定义显然成立。</li><li>$||\gamma x|| =((\gamma x) ^T A \gamma x)^ {\frac{1}{2}} = |\gamma| ||x||$ 第二条成立。</li><li><p>\begin{equation}||x+y|| \leq ||x|| + ||y|| \Leftrightarrow [(x+y)^{T} A (x+y)]^{\frac{1}{2}} \leq (x^{T} A x)^{\frac{1}{2}} + (y^{T} A y)^{\frac{1}{2}} \ \ (1)\end{equation}</p><p>由于矩阵$A$ 是对称矩阵，那么存在正交矩阵$U$，使得$A = U^T D U$，由于$A$正定 因而有$D$是对角元恒正的对角矩阵，并且$D = d^T d, d_{ii}^2 = D_{ii}, \ d_{ii} &gt; 0;\  d_{ij} = 0 ,\ if: i \neq j$。令$\hat{x} = dU x; \ \hat{y} = dU y$， 则由(1)有 $[(\hat{x} + \hat{y})^T \cdot (\hat{x} + \hat{y})]^{\frac{1}{2}} \leq  [\hat{x}^T \cdot \hat{x}]^{\frac{1}{2}} +  [\hat{y}^T \cdot \hat{y} ]^{\frac{1}{2}}\Leftrightarrow ||x+y||_2 \leq ||x||_2 + ||y|_2|$，显然成立！</p></li></ul></li></ul><h2 id="problem-11"><a href="#problem-11" class="headerlink" title="problem 11"></a>problem 11</h2><p>Computer problem (in C or C++): Using Gaussian elimination to achieve the LU decomposition with and without a column pivoting; Using the two LU decomposition algorithm to solve linear systems in which the coefficient matrix is (1) general nonsingular matrix; (2) positive definite matrix; (3) diagonally dominant matrix.  Compare the numerical accuracy for the two algorithms. The size of the matrices should be greater than 1000.</p><ul><li><a href="https://jbox.sjtu.edu.cn/l/toTTdY" target="_blank" rel="noopener">code download</a><ul><li>nonsingular  matrix : 选偏主元与否会影响精度，如下图：（选主元的误差会比不选主元的误差小三倍左右）<br> <img src="https://ibelieveicanfly.gq/figure/hw02/p11_nonSingluar.JPG" alt="nonsinglur"></li><li>Diagonally dominant matrix: 选偏主元与否不影响精度。<br>  <img src="https://ibelieveicanfly.gq/figure/hw02/p11_diagonal.JPG" alt="diagonal"></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018年9月23日-Homework02&quot;&gt;&lt;a href=&quot;#2018年9月23日-Homework02&quot; class=&quot;headerlink&quot; title=&quot; 2018年9月23日 Homework02 &quot;&gt;&lt;/a&gt;&lt;center&gt; 2018年9月23日 H
      
    
    </summary>
    
      <category term="Numeric" scheme="https://ibelieveicanfly.gq/categories/Numeric/"/>
    
    
      <category term="2018-fall" scheme="https://ibelieveicanfly.gq/tags/2018-fall/"/>
    
      <category term="numeric" scheme="https://ibelieveicanfly.gq/tags/numeric/"/>
    
  </entry>
  
  <entry>
    <title>Numeric-hw01</title>
    <link href="https://ibelieveicanfly.gq/2018/Numeric-hw01.html"/>
    <id>https://ibelieveicanfly.gq/2018/Numeric-hw01.html</id>
    <published>2018-09-19T12:12:02.000Z</published>
    <updated>2018-10-22T11:03:24.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018年9月19日-Homework01"><a href="#2018年9月19日-Homework01" class="headerlink" title=" 2018年9月19日 Homework01 "></a><center> 2018年9月19日 Homework01 </center></h1><p>本次作业的源码<a href="https://jbox.sjtu.edu.cn/l/G575Bw" target="_blank" rel="noopener">下载链接</a></p><h2 id="Problem-1-Page-45-1-7"><a href="#Problem-1-Page-45-1-7" class="headerlink" title="Problem 1 [Page 45 1.7]"></a>Problem 1 [Page 45 1.7]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw01/problem01.JPG" alt="problem"> </p><ul><li><p>Solution</p><ul><li><p>中心差分</p><p><img src="https://ibelieveicanfly.gq/figure/hw01/center_diff.png" alt="Center_diff"></p><p>可以看出当$k=10^{-8}$ 达到误差最小，是由于其与分子的双精度误差<br>的开方可比拟的缘故。 和例子1.3 很契合。</p></li><li><p>向前差分<br><img src="https://ibelieveicanfly.gq/figure/hw01/forward_diff.png" alt="forward_diff"></p><p>可以看出当$k=10^{-6}$ 达到误差最小，并不和$h \approx \sqrt{\epsilon_{mach}}$ 一致。</p></li></ul></li></ul><hr><h2 id="Problem-2-Page-46-1-9"><a href="#Problem-2-Page-46-1-9" class="headerlink" title="Problem 2 [Page 46 1.9]"></a>Problem 2 [Page 46 1.9]</h2><p><img src="https://ibelieveicanfly.gq/figure/hw01/problem02.JPG" alt="problem"></p><ul><li><p>Solution</p><ul><li>(b)通过计算: $\frac{x^n}{n!}$ 小于 计算机双精度$10^{-16}$作为计算停止准则。</li><li><p>(c)计算结果如下：</p><p><img src="https://ibelieveicanfly.gq/figure/hw01/err-noImpove.JPG" alt="result no improve"></p></li><li>(d) 对于负数，由于级数相邻两项符号不一致，而且大小在一个数量级上，相减会丢失精度。所以对负数情况可以求对应的正数再取倒数，测试结果如下:<br><img src="https://ibelieveicanfly.gq/figure/hw01/err-Impove.JPG" alt="result improve"></li><li><p>(e) 对负数情况进行分组求和，如将正的放在一起和负的放在一起，最后相减(数值结果如下图)，等操作无法改善精度， 归根究底就是两个想近数相减引起的。因此可以下结论，交换重组项无法改善精度。</p><p>$$e^{-x} = (\frac{x^{0}}{0!} +\frac{x^{2}}{2!}+ \frac{x^{4}}{4!}  +\cdots  ) -(\frac{x^{1}}{1!} +\frac{x^{3}}{3!}+ \frac{x^{5}}{5!}  +\cdots  )$$<br><img src="https://ibelieveicanfly.gq/figure/hw01/err-regroup.JPG" alt="result compare"></p></li></ul></li></ul><hr><h2 id="Problem-3-Page-46-1-9"><a href="#Problem-3-Page-46-1-9" class="headerlink" title="Problem 3 [Page 46 1.9]"></a>Problem 3 [Page 46 1.9]</h2><p>(Matlab test) For $n=500, 1000,2000, 4000, 8000$, generate an $n\times n$ random matrix B, and an $n\times 1$ vector b.</p><p>Find the symmetric matrix $A=B^{\tau} \cdot B$<br>1)    Using function “eig” to test the time cost for eigen decomposition;<br>2)    Using $x=A / b$, and $x=A^{-1}\cdot b$ to test the time cost in finding the solution of $Ax=b$;<br>3)    Plot all the time costs as a function of n and the power law for the time costs.</p><ul><li><p>Solution</p><ul><li>1) 计算结果如下：<br>计算时间耗时：<br><img src="https://ibelieveicanfly.gq/figure/hw01/tiimeCounter00.jpg" alt="result eig"></li><li><p>2) 计算结果如下：<br>$t_1$是没有求逆矩阵求解线性方程所用时间。<br>$t_2$是有求逆矩阵求解线性方程所用时间。<br>不同分量对应不同的维数的矩阵求解时间。<br><img src="https://ibelieveicanfly.gq/figure/hw01/tiimeCounter01.jpg" alt="result inverse or not compare"></p></li><li><p>3) 如下图：<br>蓝线是有求逆矩阵的维数对时间的 $log$ 曲线。<br>红线是没有求逆矩阵的维数对时间的 $log$ 曲线。<br><img src="https://ibelieveicanfly.gq/figure/hw01/logToLog.JPG" alt="log to log"></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018年9月19日-Homework01&quot;&gt;&lt;a href=&quot;#2018年9月19日-Homework01&quot; class=&quot;headerlink&quot; title=&quot; 2018年9月19日 Homework01 &quot;&gt;&lt;/a&gt;&lt;center&gt; 2018年9月19日 H
      
    
    </summary>
    
      <category term="Numeric" scheme="https://ibelieveicanfly.gq/categories/Numeric/"/>
    
    
      <category term="2018-fall" scheme="https://ibelieveicanfly.gq/tags/2018-fall/"/>
    
      <category term="numeric" scheme="https://ibelieveicanfly.gq/tags/numeric/"/>
    
  </entry>
  
  <entry>
    <title>transport03</title>
    <link href="https://ibelieveicanfly.gq/2018/transport03.html"/>
    <id>https://ibelieveicanfly.gq/2018/transport03.html</id>
    <published>2018-08-15T01:14:02.000Z</published>
    <updated>2018-08-17T14:58:06.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Boltzmann-equation"><a href="#Boltzmann-equation" class="headerlink" title="Boltzmann equation"></a>Boltzmann equation</h1><p>$$ f(t, \vec{x}, \vec{u}) \leftarrow evolution$$</p><ul><li>the number of moecules in a $d^3\vec{x}$ volume element and $d^3u\vec{u}$ velecity element </li></ul><hr><h1 id="compact-cas-kinetic-scheme-gks-一个有希望的方向"><a href="#compact-cas-kinetic-scheme-gks-一个有希望的方向" class="headerlink" title="compact cas-kinetic scheme(gks) 一个有希望的方向"></a>compact cas-kinetic scheme(gks) 一个有希望的方向</h1><h2 id="compact-4-rd-order-GKS"><a href="#compact-4-rd-order-GKS" class="headerlink" title="compact 4-rd order GKS"></a>compact 4-rd order GKS</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Boltzmann-equation&quot;&gt;&lt;a href=&quot;#Boltzmann-equation&quot; class=&quot;headerlink&quot; title=&quot;Boltzmann equation&quot;&gt;&lt;/a&gt;Boltzmann equation&lt;/h1&gt;&lt;p&gt;$$ f(t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>transport01</title>
    <link href="https://ibelieveicanfly.gq/2018/transport01.html"/>
    <id>https://ibelieveicanfly.gq/2018/transport01.html</id>
    <published>2018-08-13T11:08:26.000Z</published>
    <updated>2018-08-13T13:43:45.407Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ibelieveicanfly.gq/video/book/现代物理基础丛书_输运理论_黄祖洽.pdf">Book: 输运理论 黄祖洽</a></p><h1 id="multiscale-Transport-modeling-amp-computation"><a href="#multiscale-Transport-modeling-amp-computation" class="headerlink" title="multiscale Transport modeling &amp; computation"></a>multiscale Transport modeling &amp; computation</h1><h2 id="gas-dynamics"><a href="#gas-dynamics" class="headerlink" title="gas dynamics:"></a>gas dynamics:</h2><ol><li>navier-stokes equation :</li></ol><p>$k_n = \frac{l}{L}$</p><ul><li>flud element</li><li>hydrodyamic</li><li>（宏观）</li></ul><ol start="2"><li>boltzmam equation<ul><li>“particle”</li><li>mean free path</li><li>kinetic scale （介观）</li></ul></li></ol><h2 id="radiative-transfer-optical-thick"><a href="#radiative-transfer-optical-thick" class="headerlink" title="radiative transfer (optical thick)"></a>radiative transfer (optical thick)</h2><ul><li>光子和物质相互作用</li><li>optical thick diffusion</li><li>plasma -vlasov eqn 无碰撞 + maxwell + two phase flow</li><li>magnetic-hydrodynamics<ul><li>two fluid model</li><li>hall MHD</li><li>~ ~ ~</li></ul></li><li>idea magnetic-hydrodynamics</li></ul><h2 id="different-level-of-description"><a href="#different-level-of-description" class="headerlink" title="different level of description"></a>different level of description</h2><ol><li>microscopic （微观）( resolution to particle )<ul><li>Hamiltonian - Newton’s Law</li><li>indiviual paritcle</li></ul></li></ol><p>$$P_r = -\frac{\partial H}{\partial q_r}$$</p><p>$$q_r = - \frac{\partial H}{\partial p_r}, r = 1,2,…3N$$</p><p>$$ H = \sum_{1}^{N} kinetic + potential<br>$$</p><ol start="2"><li>mesoscopic （介观）</li></ol><p>(不能跟踪每个粒子 )</p><p>mean free path 空间自由程$l_1$</p><p>collustion time $\tau_1$</p><p>botzmann eqn &amp; distribution function $\rho(x,t,u)$ 7-dim</p><p>微观 推导 介观 （BBGKY) 无法给出中间尺度</p><ol start="3"><li>macroscopic (宏观)</li></ol><ul><li>Navier-stoks</li><li>MHD</li><li>two phase flow</li><li>multiphase flow</li></ul><p>$$ \rho , V, T (x, t): 4-dim $$</p><p>Newtone -&gt; boltzmann -&gt; NS<br>single particle .. 尺度逐渐变大<br>Boltzmann -&gt; NS</p><ul><li>chapmann enskog expansion</li><li>burelt supris~</li><li>moments – Grad 13, 26, 35 距方程</li></ul><p>中间尺度 (非平衡物理 unexplore)： “shock Structure”<br>可能的理论</p><h2 id="Difficulties"><a href="#Difficulties" class="headerlink" title="Difficulties"></a>Difficulties</h2><ol><li>degree of freedom</li></ol><ul><li>NS (5 degree)<ul><li>conservation law $\rho , \rho v,\rho E$</li><li>Boltzmann($\infty$ degree)</li></ul></li></ul><p>不是守恒量的确定方程 自然界没有:</p><p>$$ \frac{\partial T_x}{\partial t} + ……$$<br>$$ \frac{\partial T_{xy}}{\partial t} + ……$$</p><p>Discontinuous Galerkin “DG”</p><ul><li>网格有更多自由度提高精度 (相当于对原控制方程求)</li></ul><p>$$<br>\frac{\partial}{\partial x} : \rho _x + (\rho u)_x =0<br>$$</p><ul><li>compact high-order</li><li>不是直接建模不可能成功</li><li>从Boltzmann 方程直接推出中间尺度 ，难成功</li></ul><h2 id="Bolzmann-两体碰撞"><a href="#Bolzmann-两体碰撞" class="headerlink" title="Bolzmann 两体碰撞"></a>Bolzmann 两体碰撞</h2><ul><li>trasnsport &amp; collision decouple</li><li>$\delta t \leq \tau, \delta x \leq l$ 前提</li><li>如果$\Delta x \approx 5l, \Delta t \approx 5\tau$ ，未知领域</li></ul><h2 id="Numericall-metheds"><a href="#Numericall-metheds" class="headerlink" title="Numericall metheds"></a>Numericall metheds</h2><ul><li>macro</li><li>NS</li><li>MHD</li><li>multiphase</li></ul><p>Numerical PDE</p><ul><li>Boltzmann<ul><li>DVM</li><li>SN</li></ul></li><li>vlasov</li></ul><h2 id="particle-methods"><a href="#particle-methods" class="headerlink" title="particle methods"></a>particle methods</h2><ul><li>Direct simulation monte carlo (DSMC, bird 1960) 稀波流 稀薄气体</li><li>IMC</li><li>PIC</li><li>$\Delta x\sim \frac{l}{3}, \Delta t \sim \frac{\tau}{3} , 64nm$ 计算量巨大</li></ul><h1 id="multiscale-modeling"><a href="#multiscale-modeling" class="headerlink" title="multiscale modeling"></a>multiscale modeling</h1><ul><li>Scale $(\Delta x,\Delta t)$</li><li>discrete governing eqn</li><li>computation (多尺度)</li><li>$m=10$,飞机头部密度非常大，飞机尾部几乎真空。</li><li>空天飞机，网格机头部分粒子很多NS eqn，尾翼粒子稀薄Boltzmann eqn</li><li>卫星喷管，箱内密度很高NS方程，喷嘴外真空。</li></ul><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><ol><li>NS eqn<ul><li>continuum mechanics 连续介质流体 用微积分 离散更有优势。</li><li>两个粒子黏在一块。</li><li>流体微团没有物质交换</li></ul></li></ol><ol start="2"><li><p>Boltzmann Eqn</p></li><li><p>Unified gas Kinetic Scheme</p><ul><li>rarefied gas</li><li>raiation</li><li>Newton transport</li><li>plasma</li><li>two phase</li><li>Particle Version 化学反应</li><li>Navier-Stokes Equation : flud gas</li></ul></li></ol><h2 id="Navier-Stokes-Equation-flud-gas"><a href="#Navier-Stokes-Equation-flud-gas" class="headerlink" title="Navier-Stokes Equation : flud gas"></a>Navier-Stokes Equation : flud gas</h2><p>$\rho = \frac{\Delta m}{\Delta v}$ </p><ul><li>kinematic properties:<ul><li>Velocity acceleration vorticity</li></ul></li><li>transport properties:<ul><li>viscosity , thermal conductivity</li></ul></li><li>Thermodynamic properties:<ul><li>pressure, density temperature</li></ul></li><li><p>location:</p><ul><li>$X(t),Q(X(t),t)$</li><li>$\frac{dQ}{dt} = \frac{\partial Q}{\partial t} + \frac{\partial Q}{\partial X}\frac{\partial X}{\partial t} +\frac{\partial Q}{\partial Y}\frac{\partial Y}{\partial t} + \frac{\partial Q}{\partial Z}*\frac{\partial Z}{\partial t}$</li><li><p>$= \frac{\partial Q}{\partial t} +V \cdot \nabla Q$</p><p>$$\frac{DQ}{Dt} = \frac{dQ}{t} = \frac{\partial Q}{\partial t} + \vec{V} \cdot \nabla Q $$<br>$$ \vec{V} \cdot \nabla \vec{V} = \nabla \frac{\vec{V}^2}{2} - \vec{V} \times (\nabla \times \vec{V})$$</p></li></ul></li></ul><p>$$ \vec{w} = \nabla \times \vec{V}$$</p><p>Vorticity:</p><p>$$ \frac{DV_i}{Dt} = \frac{\partial V_i}{\partial t} + V_j \partial V_i$$</p><ul><li>translation (3-degree)</li><li>rotation (3-degree)</li><li>extensional strain(3-degree)</li><li>shear strain(3-degree)</li></ul><ol><li>Scale Vector</li><li>second order tensor</li></ol><p>$$\nabla V = 0.5 (\nabla V + (\nabla V)^T)_ (shear Strain) + 0.5 (\nabla V - (\nabla V)^T)_ (rotation)$$</p><p>反对称张量只有三个自由度</p><p>对称张量有六个自由度</p><ul><li>$\epsilon_{ij} = 0.5(\partial_j V_i + \partial_i V_j)$ 应变</li><li>stress：$\tau_{ij} = f(\epsilon_{ij})$应力<ul><li>Newton fluid<ul><li>$\tau_{ij} \sim \epsilon_{ij}$</li></ul></li><li>Non Newton fluid</li></ul></li></ul><p>$F \sim \alpha \frac{dV}{dy}$  满足此式是牛顿流体</p><ul><li><p>$\tau_{\alpha \beta}e_{\alpha}e_{\beta}$</p><ul><li>$\alpha$ direction of normal</li><li>$\alpha$ direction of force</li></ul></li><li><p>$f = n \cdot \tau = f_n + f_t$</p></li><li>$f_n = (n \cdot f)$</li><li>$f_n = (n \cdot f) n = n \cdot (n \cdot \tau) n = (n n : \tau) n$</li><li>$f_t = f - f_n = n \cdot \tau  - (nn: \tau) n = f \cdot (I - n n)$</li><li>$\tau \sim (\nabla V + (\nabla V)^{T})$</li></ul><p>Symmetric tensor</p><p>$moment =  I\frac{dW}{dt} -&gt; 0$ 力矩</p><p>$\int\int (r \times f) ds = I \frac{dw}{dt}$</p><p>$f = n\cdot \tau$</p><p>流体微团趋于零：$\tau_{ij} = \tau_{ji}$</p><hr><p>$$\tau_{ij} = -P \delta_{ij} (hyrostatic Pressure) + \mu[\frac{\partial V_i}{\partial x_j}+\frac{\partial V_i}{\partial x_j} - \frac{2}{3} \nabla \cdot \vec{V}]$$</p><h2 id="Equation-of-compressible-Viscous-flow"><a href="#Equation-of-compressible-Viscous-flow" class="headerlink" title="Equation of compressible Viscous flow"></a>Equation of compressible Viscous flow</h2><ol><li>mass conservation 流体微团: </li></ol><ul><li>跟着流体微团：$\frac{Dm}{Dt} = 0$<ul><li>$ \frac{D}{Dt} (\rho V)  = \rho \frac{DV} {Dt} + V \frac{D\rho }{Dt}= 0$</li><li>$=\rho v \nabla v + v \frac{D\rho}{Dt}$</li></ul></li></ul><p>$\frac{D V}{Dt} / V = \nabla \cdot V$</p><p>$$V (\rho \nabla \cdot V + \frac{\partial\rho}{\partial t} + V \cdot \nabla \rho)  =0$$<br>$$\frac{\partial \rho}{\partial t} + \nabla \cdot (\rho V)= 0$$</p><h2 id="monmentum-Eq"><a href="#monmentum-Eq" class="headerlink" title="monmentum Eq:"></a>monmentum Eq:</h2><p>$$\frac{\rho v V}{Dt} = body force + surface force$$<br>$$\rho v \frac{DV}{Dt} = \rho V g + v V \cdot \tau$$<br>$$\rho \frac{DV}{Dt} = \rho \vec{g} + \nabla \tau$$</p><p>$$\frac{\partial \rho V}{\partial t} + V\cdot (\rho VV - \tau) = \rho g$$</p><p>$$\vec{f}_{surface} = \int \int \tau \cdot n dt = \int \int \int \nabla \cdot \tau dv = \nabla \cdot \tau V$$</p><h2 id="Energy-Eqn-流体微团"><a href="#Energy-Eqn-流体微团" class="headerlink" title="Energy Eqn: (流体微团)"></a>Energy Eqn: (流体微团)</h2><h3 id="1st-laws-of-thermaodynamics"><a href="#1st-laws-of-thermaodynamics" class="headerlink" title="1st-laws of thermaodynamics:"></a>1st-laws of thermaodynamics:</h3><p>$$<br>E = \rho \hat{V}(e + 0.5 V^2 - g \cdot r)<br>$$</p><p>$m= \rho \hat{V}= const$</p><p>$$\frac{DE}{Dt} = \frac{DQ}{Dt} + \frac{DW}{Dt}$$</p><ul><li>热交换</li><li>对外做功</li></ul><p>$$<br>\frac{DQ}{Dt} = \int\int -q \cdot n dx = -\int \int \int - \nabla \cdot q dV = -\nabla \cdot q \hat{V}<br>$$</p><p>Assumption Fourier’s Law : $q = -R \nabla T$ (其中一个假设，可换成其他 不一定对) </p><p>$$q \approx g$$</p><p>$$<br>\frac{DW}{Dt} = \int \int (\tau \cdot n)\cdot V dS = \int \int v \cdot (\tau \cdot n) ds<br>$$</p><p>$$<br>= \int \int \int \nabla \cdot (V \cdot \tau)dV = \nabla\cdot (V\cdot \tau)\cdot  V<br>$$</p><hr><p>(力点乘速度等于功)</p><p>$$\rho (\frac{De}{Dt} + \frac{D(\frac{1}{2} V^2)}{Dt} + \frac{D}{Dt} (-g \cdot r)) = \nabla \cdot (k \nabla T) + \nabla \cdot (V \cdot \tau)$$</p><p>e : internal energy (therinal )for unit mass</p><p>粒子3个translation degree ， 粒子内部旋转振动有k个自由度。</p><p>each egreee of reedom shares the same amount of energy</p><p>m: molecula mass</p><p>$$<br>e = \frac{1}{m} ( k + 3) \frac{1}{2}\hat{k} T<br>$$</p><p>$\hat{k}$ : : Boltzomann constant , T temperature</p><ul><li>$C_v$ specific heat at constant volume</li><li>$C_p$, at constant pressure</li><li>$r,R$</li></ul><p>$$ \delta Q= C_v dT$$</p><p>$$de = \frac{1}{m} \frac{k+3}{2} \hat{k} dT = C_v dT = \frac{k + 3}{2} R dT$$</p><p>$$C_v = \frac{k + 3}{2}R , \frac{k}{m} =R$$</p><p>加多少热量保持压力不变：</p><p>$$\delta Q = C_p dT = C_v dT + P dV = C_vdT + R dT$$</p><p>$p = \rho R T , p = \frac{1}{V} RT, PV = RT$</p><p>$$C_p = C_v +  R = \frac{k + 3 +2 }{2}R$$</p><p>$$\gamma = \frac{C_p}{C_v} = \frac{k + 5}{k + 3} = 5/3 ,k =0; 7/5 = 1.4,k=2; isothermal, k= \infty;$$</p><h2 id="energy"><a href="#energy" class="headerlink" title="energy:"></a>energy:</h2><p>$$\rho (\frac{De}{Dt} + \frac{D \frac{1}{2}V^2}{Dt}) = \nabla \cdot (V\cdot \tau) \text{流体加速运动} + \nabla\cdot (\hat{k} \nabla T) \text{热量}$$</p><h2 id="momentum"><a href="#momentum" class="headerlink" title="momentum:"></a>momentum:</h2><p>$$\rho \frac{DV}{Dt} = \nabla \cdot \tau$$</p><p>$$\nabla \cdot (V \cdot \tau) = V \cdot (\nabla \cdot \tau) + \tau_{ij} \frac{\partial V_i}{\partial x_j}$$</p><p>thermal energy eqn:</p><p>$$\rho \frac{De}{Dt} = \nabla \cdot (\hat{k} \nabla T) + \tau_{ij} \frac{\partial u_i}{\partial x_j}$$</p><p>$$\tau = -P \delta_{ij} + \sigma_{ij}$$</p><p>$$<br>P \nabla \cdot V = -\frac{P}{\rho} \frac{D\rho}{Dt} = \rho \frac{D}{Dt} \frac{p}{\rho} - \frac{D\rho}{Dt}<br>$$</p><p>$$<br>\rho \frac{D}{Dt} (e + \frac{p}{\rho}) = \frac{DP}{Dt} + \nabla\cdot (\hat{k} \nabla T) + \sigma_{ij} \frac{\partial V_i}{\partial x_j} (heat)\geq 0<br>$$</p><p>$$\rho \frac{Dh}{Dt} = \frac{Dp}{Dt} + \nabla \cdot (\hat{k} \nabla T) + \Phi $$</p><p>termodynamic identity: </p><p>$$dh = C_p T + (1+ 1/\rho (\frac{\partial \rho}{\partial T})_p T \frac{dp}\rho$$</p><p>low speed incompressible flow:</p><p>$$\rho c_p \frac{DT}{Dt} = \nabla \cdot (\hat{k} \nabla T)$$</p><p>$$<br>\tau_{ij} = -P \delta_{ij} + \mu [<br>\frac{\partial V_i}{\partial x_j} +<br>\frac{\partial V_j}{\partial x_i}<br>-2/3 \nabla V<br>]+<br>\mu \frac{2k}{3(k+3)} \nabla V +<br>\mu \frac{2k}{3(k+3)} \nabla V<br>\approx<br>T_{rot} -T_t<br>$$</p><p>各个方向的温度  $\approx T_{ij} - T_{eq}$</p><p>$\mu$  : dynamic viscosity coefficient<br>$\hat{k}$::heat conduction coefficient</p><p>$$<br>\mu \approx \frac{1}{3}c l<br>$$</p><ul><li>c: 声速,</li><li>l: mean free path</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ibelieveicanfly.gq/video/book/现代物理基础丛书_输运理论_黄祖洽.pdf&quot;&gt;Book: 输运理论 黄祖洽&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;multiscale-Transport-modeling-amp-co
      
    
    </summary>
    
      <category term="summmer school" scheme="https://ibelieveicanfly.gq/categories/summmer-school/"/>
    
    
  </entry>
  
  <entry>
    <title>常用命令和工具</title>
    <link href="https://ibelieveicanfly.gq/2018/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E5%B7%A5%E5%85%B7.html"/>
    <id>https://ibelieveicanfly.gq/2018/常用命令和工具.html</id>
    <published>2018-08-09T12:03:09.000Z</published>
    <updated>2018-08-09T12:56:16.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><h2 id="vim-宏录制"><a href="#vim-宏录制" class="headerlink" title="vim 宏录制"></a>vim 宏录制</h2><ol><li>在normal 模式下输入 <strong>qa</strong> ，开始记录操作，其中 <strong>a</strong>  代表vim下<br><strong>a</strong> 寄存器（可以改成其他寄存器如 <strong>b, c ,d</strong> )。</li><li><p>结束录制按 <strong>q</strong>。</p></li><li><p>使用宏：normal 模式下 输入 <strong>n@a</strong> , <strong>n</strong> 代表使用次数， <strong>a</strong> 是宏存放的位置。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vim&quot;&gt;&lt;a href=&quot;#vim&quot; class=&quot;headerlink&quot; title=&quot;vim&quot;&gt;&lt;/a&gt;vim&lt;/h1&gt;&lt;h2 id=&quot;vim-宏录制&quot;&gt;&lt;a href=&quot;#vim-宏录制&quot; class=&quot;headerlink&quot; title=&quot;vim 宏录制
      
    
    </summary>
    
      <category term="vim" scheme="https://ibelieveicanfly.gq/categories/vim/"/>
    
    
      <category term="vim" scheme="https://ibelieveicanfly.gq/tags/vim/"/>
    
      <category term="linux" scheme="https://ibelieveicanfly.gq/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Note</title>
    <link href="https://ibelieveicanfly.gq/2018/Markdown-Note.html"/>
    <id>https://ibelieveicanfly.gq/2018/Markdown-Note.html</id>
    <published>2018-08-04T13:46:22.000Z</published>
    <updated>2018-10-22T14:46:31.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a><strong>加粗</strong></h2><p><em>倾斜</em></p><p><strong><em>jiacu heiti</em></strong></p><p><strong><em>倾斜加粗</em></strong></p><p><del>delete line</del></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><hr><hr><p><img src="https://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imagemogr2/auto-orient/strip%7cimageview2/2/w/550" alt="mypage" title="qukuailian"></p><p><a href="https://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imagemogr2/auto-orient/strip%7cimageview2/2/w/550" target="_blank">简书</a></p><blockquote><p>引用</p><blockquote><p>引用</p><blockquote><p>引用</p><blockquote><p>引用</p></blockquote></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[![name](markdown-note/download.jpg &apos;百度&apos;)](http://www.baidu.com)</span><br><span class="line"></span><br><span class="line">![helloworld][first link]</span><br><span class="line"></span><br><span class="line">[first link]: markdown-note/download.jpg</span><br></pre></td></tr></table></figure><p><a href="http://www.baidu.com" target="_blank" rel="noopener">helloworld</a></p><p><a href="https://www.baidu.com" target="_blank"><br>baidu</a></p><h2 id="文本结构"><a href="#文本结构" class="headerlink" title="文本结构"></a>文本结构</h2><ul><li>text 1</li><li>text 2</li><li>text 3</li></ul><ol><li>text 1</li><li>text 2</li><li>text 3</li></ol><ul><li><p>Tintin</p><ul><li>A reporter</li><li>Has poofy orange hair</li><li>Friends with the world’s most awesome dog<ul><li>Friends with the world’s most awesome dog</li></ul></li></ul></li><li><p>Haddock</p></li><li>A sea captain</li><li>Has a fantastic beard</li><li>Loves whiskey<ul><li>Possibly also scotch?</li></ul></li></ul><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><h3 id="行间公式"><a href="#行间公式" class="headerlink" title="行间公式"></a>行间公式</h3><p>恒等式:</p><p>$$cos^2(x) + sin^2(x) = 1$$</p><p>$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$</p><h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><p>恒等式：$cos^2(x) + sin^2(x) = 1$,<br>$x=\frac{-b \pm \sqrt{b^2-4ac}}{2a}$</p><h2 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h2><h3 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h3><p><code>printf(&quot;helloworld&quot;);</code></p><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><p>插入C++ 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"helloworld"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"helloworld"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"helloworld"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"helloworld"</span>);</span><br></pre></td></tr></table></figure><p>插入Java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"helloworld"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入 Bash 代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -O3 test.c -lGl -lGLu -lglut -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><p><br></p><table><thead><tr><th>dog</th><th>bird</th><th>cat</th></tr></thead><tbody><tr><td>foo</td><td>foo</td><td>foo</td></tr><tr><td>bar</td><td>bar</td><td>bar</td></tr><tr><td>baz</td><td>baz</td><td>baz</td></tr></tbody></table><p></p><p>质能方程 </p><p><img src="https://s19.postimg.cc/4okd8ygub/download.jpg" alt="download.jpg"></p><p><a href="https://postimg.cc/image/wbx2n220v/" target="_blank" rel="noopener">download.jpg</a></p><p><a href="https://postimg.cc/image/wbx2n220v/" target="_blank" rel="noopener"><img src="https://s19.postimg.cc/4okd8ygub/download.jpg" alt="download.jpg"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"helloworld"</span>);</span><br></pre></td></tr></table></figure><h2 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/mdN8OOkx2ko" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><center><br><a href="https://drive.google.com/file/d/1A7oz33irmY_ZpKNLXKTGOyv0askhgral/view?usp=sharing" target="_blank" rel="noopener">Download Markdown-Note.md</a><br></center><ul><li>A=$\begin{bmatrix}4 &amp; 0 &amp; 0\\  0 &amp; -6 &amp; 0 \\ 0&amp; 0&amp;2 \end{bmatrix}$ 换行三个slash</li><li>$cond(A) = |A|_1 \cdot |A^{-1}|_1 = 6 * 0.5 = 3$</li><li>$cond(A) = |A|_ {\infty} \cdot |A^{-1}|_ {\infty} = 6 * 0.5 = 3$ 空格在 infty前</li></ul><h2 id="花括号"><a href="#花括号" class="headerlink" title="花括号 {}"></a>花括号 {}</h2><ul><li>\{ \}</li></ul><h1 id="math-formula-error"><a href="#math-formula-error" class="headerlink" title="math formula error"></a>math formula error</h1><ul><li>行内公式有*， 或重打一遍。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;加粗&quot;&gt;&lt;a href=&quot;#加粗&quot; class=&quot;headerlink&quot; title=&quot;加粗&quot;&gt;&lt;/a&gt;&lt;strong&gt;加粗&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;倾斜&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;jiacu heiti&lt;/em&gt;&lt;/stro
      
    
    </summary>
    
      <category term="Markdown" scheme="https://ibelieveicanfly.gq/categories/Markdown/"/>
    
    
      <category term="图片" scheme="https://ibelieveicanfly.gq/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="代码" scheme="https://ibelieveicanfly.gq/tags/%E4%BB%A3%E7%A0%81/"/>
    
      <category term="C++" scheme="https://ibelieveicanfly.gq/tags/C/"/>
    
  </entry>
  
</feed>
